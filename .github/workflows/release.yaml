name: Release

on:
  push:
    branches:
      - main
      - dev

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUST_BACKTRACE: full
  RUSTUP_MAX_RETRIES: 10
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
  CARGO_PROFILE_RELEASE_LTO: true
  CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER: x86_64-linux-gnu-gcc
  CC_x86_64_unknown_linux_gnu: x86_64-linux-gnu-gcc
  CXX_x86_64_unknown_linux_gnu: x86_64-linux-gnu-g++
  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
  CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
  CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
  ## TODO: why?
  # BINDGEN_EXTRA_CLANG_ARGS": '--sysroot /usr/arm-linux-gnueabi'
  RUSTFLAGS: -C target-feature=+crt-static

jobs:
  build:
    runs-on: "${{ matrix.os }}"
    strategy:
      fail-fast: false 
      matrix:
        include:
          # - os: macos-latest
          #   target: aarch64-apple-darwin
          #   name: rust-openssl-windows-darwin-arm64
          # - os: macos-latest
          #   target: x86_64-apple-darwin
          #   name: rust-openssl-windows-darwin-amd64
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   name: rust-openssl-windows-linux-arm64
          # - os: ubuntu-latest
          #   target: x86_64-unknown-linux-gnu
          #   name: rust-openssl-windows-linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: rust-openssl-windows-windows-amd64
          - os: windows-latest
            target: x86_64-pc-windows-gnu
            name: rust-openssl-windows-windows-amd64-gnu

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Cache
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: "${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}"
      - uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: "${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}"
      - uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      # - name: Install Protoc
      #   uses: arduino/setup-protoc@v2

      - name: Add cross compile Linux tools
        if: ${{ matrix.target == 'aarch64-unknown-linux-gnu' }}
        shell: bash
        run: |
          sudo apt update -y
          sudo apt install -y build-essential g++-x86-64-linux-gnu libc6-dev-amd64-cross g++-aarch64-linux-gnu libc6-dev-arm64-cross gcc-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Add cross compile Win tools
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: |
          choco install openssl

      - name: Cargo Build
        shell: bash
        run: |
          cargo build --release --target=${{ matrix.target }}
      
      - uses: actions/upload-artifact@v3
        with:
          path: target/${{ matrix.target }}/release/rust-openssl-windows*
          name: ${{ matrix.name }}
